"use strict";(self.webpackChunkquiz_gen_ai=self.webpackChunkquiz_gen_ai||[]).push([[448],{448:(e,o,n)=>{n.d(o,{generateQuestionsWithLLM:()=>s});var t=n(423);const r={provider:"openai",model:"gpt-4o-mini"};const i=new class{constructor(e){this.config=void 0,this.config={...r,...e}}async generateQuestions(e,o,n){console.log("LLM Service: Starting question generation...",{topic:e,difficulty:o,count:n});const r=(0,t.mt)();if(console.log("LLM Service: Retrieved settings:",r?{provider:r.provider,hasApiKey:!!r.apiKey}:null),!r||!r.apiKey)throw new Error("No API configuration found. Please configure your API settings first.");this.config={provider:r.provider,apiKey:r.apiKey,model:r.model};const i=this.createPrompt(e,o,n);console.log("LLM Service: Generated prompt:",i);try{let e;switch(console.log("LLM Service: Using provider:",this.config.provider),this.config.provider){case"openai":e=await this.generateWithOpenAI(i);break;case"claude":e=await this.generateWithClaude(i);break;default:throw new Error(`Unsupported provider: ${this.config.provider}`)}return console.log("LLM Service: Successfully generated questions:",e.length),e}catch(s){if(console.error("LLM Service: Error generating questions:",s),s instanceof Error)throw s;throw new Error("Failed to generate questions. Please try again.")}}createPrompt(e,o,n){const t={easy:"beginner",medium:"intermediate",hard:"advanced"}[o]||o;return`Generate ${n} multiple choice quiz questions about "${e}" at ${t} difficulty level.\n\nRequirements:\n- Each question should have exactly 4 options (A, B, C, D)\n- Only one option should be correct\n- Questions should be educational and factually accurate\n- Difficulty should be appropriate for ${t} level learners\n- Avoid ambiguous or trick questions\n- For beginner level: focus on basic concepts and definitions\n- For intermediate level: include practical applications and connections\n- For advanced level: cover complex scenarios and edge cases\n\nPlease respond with a JSON array in this exact format:\n[\n  {\n    "question": "What is the main concept of ${e}?",\n    "options": ["Option A", "Option B", "Option C", "Option D"],\n    "correct": 0\n  }\n]\n\nThe "correct" field should be the index (0-3) of the correct answer.\n\nTopic: ${e}\nDifficulty: ${t}\nNumber of questions: ${n}`}async generateWithOpenAI(e){var o,n;console.log("OpenAI: Starting generation...");const t=this.config.apiKey;if(!t)throw new Error("OpenAI API key not found. Please configure your API settings.");console.log("OpenAI: Making API request...");const r=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:this.config.model||"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant that generates educational quiz questions. Always respond with valid JSON format."},{role:"user",content:e}],temperature:.7,max_tokens:2e3})});if(console.log("OpenAI: Response status:",r.status),!r.ok){var i;const e=await r.json();throw console.error("OpenAI: API error response:",e),new Error(`OpenAI API error: ${(null===(i=e.error)||void 0===i?void 0:i.message)||"Unknown error"}`)}const s=await r.json();console.log("OpenAI: Received response data");const a=null===(o=s.choices[0])||void 0===o||null===(n=o.message)||void 0===n?void 0:n.content;return console.log("OpenAI: Extracted content:",(null===a||void 0===a?void 0:a.substring(0,200))+"..."),this.parseQuestions(a)}async generateWithClaude(e){var o;const n=this.config.apiKey;if(!n)throw new Error("Claude API key not found. Please configure your API settings.");const t=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":n,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:this.config.model||"claude-3-sonnet-20240229",max_tokens:2e3,messages:[{role:"user",content:e}]})});if(!t.ok){var r;const e=await t.json();throw new Error(`Anthropic API error: ${(null===(r=e.error)||void 0===r?void 0:r.message)||"Unknown error"}`)}const i=null===(o=(await t.json()).content[0])||void 0===o?void 0:o.text;return this.parseQuestions(i)}parseQuestions(e){try{const o=e.match(/\[[\s\S]*\]/);if(!o)throw new Error("No JSON array found in response");const n=JSON.parse(o[0]);if(!Array.isArray(n))throw new Error("Response is not an array");return n.map((e,o)=>{if(!e.question||!Array.isArray(e.options)||4!==e.options.length||"number"!==typeof e.correct)throw new Error(`Invalid question format at index ${o}`);if(e.correct<0||e.correct>3)throw new Error(`Invalid correct answer index at question ${o}`);return{question:e.question,options:e.options,correct:e.correct}})}catch(o){throw console.error("Failed to parse LLM response:",e),new Error("Failed to parse generated questions. Please try again.")}}},s=async(e,o,n)=>(console.log("QuestionBank: generateQuestionsWithLLM called with topic:",e,"difficulty:",o,"count:",n),await i.generateQuestions(e,o,n))}}]);
//# sourceMappingURL=448.58d17a51.chunk.js.map